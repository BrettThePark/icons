{"version":3,"sources":["ng://@pxblue/ng-progress-icons/lib/ng-progress-icons.service.ts","ng://@pxblue/ng-progress-icons/lib/ng-progress-icons.component.ts","ng://@pxblue/ng-progress-icons/lib/utilities.ts","ng://@pxblue/ng-progress-icons/lib/battery/battery.component.ts","ng://@pxblue/ng-progress-icons/lib/heart/heart.component.ts","ng://@pxblue/ng-progress-icons/lib/pie/pie.component.ts","ng://@pxblue/ng-progress-icons/lib/ng-progress-icons.module.ts"],"names":["NgProgressIconsService","Injectable","args","providedIn","NgProgressIconsComponent","prototype","ngOnInit","Component","selector","template","styles","rangeValue","value","min","max","Math","getCoordinates","percent","radius","x","cos","PI","y","sin","BatteryComponent","this","size","charging","outlined","basePath","chargePath","outlinedPath","baseID","chargeID","rv","maskIDleft","maskIDright","startX","fillWidth","getBasepath","getClipPath","getID","inputs","HeartComponent","startY","getPath","PieComponent","ring","iconStroke","centerX","centerY","outerRadiusLarge","stroke","round","innerRadiusLarge","outerRadiusSmall","innerRadiusSmall","outlineBase","twoToneBase","clipPath","NgProgressIconsModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgProgressIconsService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'progress-ng-progress-icons',\n  template: `\n    <p>\n      ng-progress-icons works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgProgressIconsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export const rangeValue = function(value, min, max){\n    return Math.max(min,Math.min(value,max))\n}\n\nexport const getCoordinates = function(percent, radius = 12){\n    return {\n        x: radius + (radius * Math.cos( (percent/100) * 2*Math.PI) ),\n        y: radius + (radius * Math.sin( (percent/100) * 2*Math.PI) )\n    }\n}","import { Component, OnInit } from '@angular/core';\nimport { rangeValue } from '../utilities';\n\n@Component({\n  selector: 'battery-progress',\n  template: `\n    <svg [attr.height]=\"size+'px'\" [attr.width]=\"size+'px'\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\" style=\"enable-background:new 0 0 24 24;\" xml:space=\"preserve\"> \n    \n    <defs>\n      <mask *ngIf = \"outlined \" [attr.id]=\"maskIDleft\">\n        <rect width=\"100%\" height=\"100%\" fill=\"white\" />\n        <polygon fill=\"black\" points=\"11.5,13 11.5,15 4,11 9.5,11 9.5,9 17,13 \" />\n      </mask>\n      <mask *ngIf = \"outlined \" [attr.id]=\"maskIDright\">\n        <rect width=\"100%\" height=\"100%\" fill=\"white\" />\n        <rect [attr.x]=\"startX\" y=\"7\" fill=\"black\"  [attr.width]=\"rv(percent/100*fillWidth, 0, 100)\" height=\"10\" />\n      </mask>\n    </defs>\n    <path [attr.fill]=\"color || 'currentColor'\"  [attr.fill-opacity]=\"(outlined || percent >= 100) ? '1' : '0.3'\" [attr.clip-path]=\"'url(#' + getID() + ')'\" [attr.d]=\"getBasepath()\"/>\n      <clipPath [id]=\"getID()\">\n        <path overflow=\"visible\" [attr.d]=\"getClipPath()\"/>\n      </clipPath>\n      <g  [attr.fill]= \"color || 'currentColor'\">\n      \n<rect [attr.fill]=\"color || 'currentColor'\" [attr.x]=\"startX\" y=\"7\" [attr.clip-path]=\"'url(#' + getID() + ')'\" [attr.width]=\"rv(percent/100*fillWidth, 0, 100)\" height=\"10\"  [attr.mask]=\"outlined && charging ? 'url(#' + maskIDleft + ')' : null\"/>\n<polygon  *ngIf = \"outlined && charging\" points=\"11.5,13 11.5,15 4,11 9.5,11 9.5,9 17,13\" [attr.mask]=\"'url(#' + maskIDright + ')'\" />\n      </g>\n    </svg>\n  `,\n  styles: [],\n  inputs: ['percent', 'size', 'color', 'charging', 'outlined']\n})\nexport class BatteryComponent implements OnInit {\n  percent: number = 100;\n  size: number = 24;\n  color: string;\n  charging: boolean = false;\n  outlined: boolean = false;\n  maskIDleft;\n  maskIDright;\n  startX;\n  fillWidth;\n\n\n  basePath = 'M20,10V8.3C20,7.6,19.4,7,18.7,7H3.3C2.6,7,2,7.6,2,8.3v7.3C2,16.4,2.6,17,3.3,17h15.3c0.7,0,1.3-0.6,1.3-1.3V14h2v-4H20z';\n  chargePath = 'M20,10V8.33a1.319,1.319,0,0,0-1-1.263A1.257,1.257,0,0,0,18.67,7H3.34A1.338,1.338,0,0,0,2,8.33v7.33A1.338,1.338,0,0,0,3.33,17H18.67a1.257,1.257,0,0,0,.33-.067,1.319,1.319,0,0,0,1-1.263V14h2V10Zm-8.5,3v2L4,11H9.5V9L17,13Z';\n  outlinedPath = 'M18,9v6H4V9H18m.7-2H3.3A1.324,1.324,0,0,0,2,8.3v7.3A1.347,1.347,0,0,0,3.3,17H18.6a1.324,1.324,0,0,0,1.3-1.3V14h2V10H20V8.3A1.324,1.324,0,0,0,18.7,7Z';\n  baseID = 'pxb-battery-clip';\n  chargeID = 'pxb-battery-clip-charge';\n\n  constructor() { }\n\n  ngOnInit() {\n    this.maskIDleft = 'maskLeft-' + this.percent;\n    this.maskIDright = 'maskRight-' + this.percent;\n\n    this.startX = this.outlined ? 3.9 : 2;\n    this.fillWidth = this.outlined ? 14.2 : 18;\n  }\n\n\n  getBasepath() {\n    return (this.outlined ? this.outlinedPath : this.basePath);\n  }\n  getClipPath() {\n    return (this.charging ? this.chargePath : this.basePath);\n  }\n  getID() {\n    return (this.charging ? this.chargeID : this.baseID);\n  }\n\n  rv = rangeValue;\n\n}","import { Component, OnInit } from '@angular/core';\nimport { rangeValue } from '../utilities';\n\n@Component({\n  selector: 'heart-progress',\n  template: `\n    <svg [attr.height]=\"size+'px'\" [attr.width]=\"size+'px'\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\" style=\"enable-background:new 0 0 24 24;\" xml:space=\"preserve\">\n      <path [attr.fill]=\"color || 'currentColor'\" [attr.fill-opacity]=\"(outlined || percent >= 100) ? '1' : '0.3'\" [attr.d]=\"getPath()\"/>\n      <clipPath id=\"pxb-heart-clip\">\n        <path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"/>\n      </clipPath>\n      <rect [attr.fill]=\"color || 'currentColor'\" clip-path=\"url(#pxb-heart-clip)\" x=\"2\" [attr.y]=\"startY-(rv(percent,0,100))*startX/100\" width=\"20\" height=\"20\" />\n    </svg>\n  `,\n  styles: [],\n  inputs: ['percent', 'size', 'color', 'outlined']\n})\nexport class HeartComponent implements OnInit {\n  percent:number = 100;\n  size:number = 24;\n  color:string;\n  outlined:boolean = false;\n  startY;\n  startX;\n\n  basePath = 'M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z';\n  outlinedPath = 'M16.5,5A3.462,3.462,0,0,1,20,8.5c0,2.885-3.125,5.725-7.856,10.024l-.035.032-.1.094-.124-.113C7.135,14.234,4,11.391,4,8.5A3.462,3.462,0,0,1,7.5,5a3.96,3.96,0,0,1,2.977,1.387L12,8.175l1.523-1.788A3.96,3.96,0,0,1,16.5,5m0-2A5.988,5.988,0,0,0,12,5.09,5.988,5.988,0,0,0,7.5,3,5.447,5.447,0,0,0,2,8.5c0,3.78,3.4,6.86,8.55,11.53L12,21.35l1.45-1.31C18.6,15.36,22,12.28,22,8.5A5.447,5.447,0,0,0,16.5,3Z';\n  constructor() {}\n   \n\n  ngOnInit() {  \n    this.startY = this.outlined ? 19.45 : 21.35;\n    this.startX = this.outlined ? 14.55 : 18.35;\n\n  }\n\n  getPath(){\n    return (this.outlined ? this.outlinedPath : this.basePath);\n  }\n  rv = rangeValue;\n\n}","import { Component, OnInit } from '@angular/core';\nimport { rangeValue, getCoordinates } from '../utilities';\n\n@Component({\n  selector: 'pie-progress',\n  template: `\n    <svg [attr.height]=\"size+'px'\" \n    [attr.width]=\"size+'px'\" \n    x=\"0px\" y=\"0px\" \n    viewBox=\"0 0 24 24\" \n    style=\"transform: rotate(-.25turn)\">\n\n      <clipPath [attr.id]=\"'pxb-donut-clip-'+stroke\">\n        <path [attr.d]=\"clipPath\"/>\n      </clipPath>\n      <path [attr.clip-path]=\"'url(#pxb-donut-clip-'+stroke+')'\"\n      [attr.fill]=\"color || 'currentColor'\" \n      [attr.fill-opacity]=\"outlined || percent >= 100 ? '1' : '0.3'\"\n      [attr.d]=\"outlined ? outlineBase : twoToneBase\"\n    />\n    <path *ngIf=\"percent > 0 && percent < 100\" \n    [attr.fill]=\"color || 'currentColor'\" \n    [attr.clip-path]=\"'url(#pxb-donut-clip-'+stroke+')'\" \n    [attr.d]= \"getPath()\"  />\n\n      <circle *ngIf=\"percent === 100 && outlined\" [attr.clip-path]=\"'url(#pxb-donut-clip-'+stroke+')'\" cx=\"12\" cy=\"12\" r=\"10\" [attr.fill]=\"color || 'currentColor'\"></circle>\n      \n    </svg>\n  `,\n  styles: [],\n  inputs: ['percent', 'size', 'color', 'ring', 'outlined']\n})\nexport class PieComponent implements OnInit {\n  percent: number = 100;\n  size: number = 24;\n  color: string;\n  ring: number = 10;\n  outlined: boolean = false;\n  outlineBase;\n  twoToneBase;\n  clipPath;\n  iconStroke = 2;\n  stroke;\n  \n\n  // Ring properties\n  centerX = 12;\n  centerY = 12;\n\n  // Outer ring\n  outerRadiusLarge = 10;\n  innerRadiusLarge;\n\n  // Inner Ring\n  outerRadiusSmall;\n  innerRadiusSmall;\n  \n\n  constructor() { }\ngetPath(){\n  return `M 12,12 H 24 A 12,12,0,${this.percent >= 50 ? 1 : 0},1,${getCoordinates(this.percent)['x']},${getCoordinates(this.percent)['y']}Z`\n}\nngOnInit() {\n  this.stroke =  Math.max(1, Math.min(10, Math.round(this.ring)));\n  this.stroke = this.outlined ? Math.max(this.stroke, 2 * this.iconStroke + 1) : this.stroke;\n  this.innerRadiusLarge = 10 - this.iconStroke;\n  this.outerRadiusSmall = 10 - this.stroke + this.iconStroke;\n  this.innerRadiusSmall = 10 - this.stroke;\n  if(this.innerRadiusSmall === 0)\n  {\n    this.outerRadiusSmall = 0;\n  }\n \n \n  this.outlineBase = `\n  M ${this.centerX} ${this.centerY-this.outerRadiusLarge}\n  A ${this.outerRadiusLarge} ${this.outerRadiusLarge} 0 1 0 ${this.centerX} ${this.centerY+this.outerRadiusLarge}\n  A ${this.outerRadiusLarge} ${this.outerRadiusLarge} 0 1 0 ${this.centerX} ${this.centerY-this.outerRadiusLarge}\n  Z\n  M ${this.centerX} ${this.centerY-this.innerRadiusLarge}\n  A ${this.innerRadiusLarge} ${this.innerRadiusLarge} 0 1 1 ${this.centerX} ${this.centerY+this.innerRadiusLarge}\n  A ${this.innerRadiusLarge} ${this.innerRadiusLarge} 0 1 1 ${this.centerX} ${this.centerY-this.innerRadiusLarge}\n  Z\n  M ${this.centerX} ${this.centerY-this.outerRadiusSmall}\n  A ${this.outerRadiusSmall} ${this.outerRadiusSmall} 0 1 0 ${this.centerX} ${this.centerY+this.outerRadiusSmall}\n  A ${this.outerRadiusSmall} ${this.outerRadiusSmall} 0 1 0 ${this.centerX} ${this.centerY-this.outerRadiusSmall}\n  Z\n  M ${this.centerX} ${this.centerY-this.innerRadiusSmall}\n  A ${this.innerRadiusSmall} ${this.innerRadiusSmall} 0 1 1 ${this.centerX} ${this.centerY+this.innerRadiusSmall}\n  A ${this.innerRadiusSmall} ${this.innerRadiusSmall} 0 1 1 ${this.centerX} ${this.centerY-this.innerRadiusSmall}\n  Z\n`;\nthis.twoToneBase =  `\nM ${this.centerX} ${this.centerY-this.outerRadiusLarge}\nA ${this.outerRadiusLarge} ${this.outerRadiusLarge} 0 1 0 ${this.centerX} ${this.centerY+this.outerRadiusLarge}\nA ${this.outerRadiusLarge} ${this.outerRadiusLarge} 0 1 0 ${this.centerX} ${this.centerY-this.outerRadiusLarge}\nZ\n`;\nthis.clipPath = `\nM12,2\nA10,10,0,1,0,22,12,\n10,10,0,0,0,12,2\nZ\nm0,${20-this.stroke} \nA ${10-this.stroke},${10-this.stroke},0,1,1,${22-this.stroke},12,\n${10-this.stroke},${10-this.stroke},0,0,1,12,${22-this.stroke}\nZ\n`\n  }\n\n\n}\n\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';  \nimport { NgProgressIconsComponent } from './ng-progress-icons.component';\nimport { BatteryComponent } from './battery/battery.component';\nimport { HeartComponent } from './heart/heart.component';\nimport { PieComponent } from './pie/pie.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgProgressIconsComponent, BatteryComponent, HeartComponent, PieComponent],\n  exports: [\n    NgProgressIconsComponent, \n    BatteryComponent, HeartComponent, PieComponent\n  ]\n})\nexport class NgProgressIconsModule { }\n"]}
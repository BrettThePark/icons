{"version":3,"file":"pie.js.map","sources":["ng://pie/lib/pie.service.ts","ng://pie/lib/pie.component.ts","ng://pie/lib/pie.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PieService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'pie-progress',\n  template: `\n    <svg [attr.height]=\"size+'px'\" [attr.width]=\"size+'px'\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 24\" style=\"enableBackground: 'new 0 0 24 24'; xmlSpace:'preserve'; transform:'rotate(-.25turn)'\">\n      <clipPath [attr.id]=\"'pxb-donut-clip-'+stroke\">\n        <path [attr.d]=\"'M12,2A10,10,0,1,0,22,12,10,10,0,0,0,12,2Zm0,' + (20-stroke) +'A' + (20-2*stroke)/2 + ',' + (20-2*stroke)/2 + ',0,1,1,' + (22-stroke) + ',12,' + (20-2*stroke)/2 + ',' + (20-2*stroke)/2 + ',0,0,1,12,' + (22-stroke) + 'Z'\"/>\n      </clipPath>\n      <circle [attr.clip-path]=\"'url(#pxb-donut-clip-'+stroke+')'\" cx=\"12\" cy=\"12\" r=\"10\" [attr.fill]=\"color || 'currentColor'\" [attr.fill-opacity]=\"percent >= 100 ? '1' : '0.3'\"></circle>\n      <path *ngIf=\"rangeValue(percent, 0, 100) > 0 && rangeValue(percent, 0, 100) < 100\" [attr.fill]=\"color || 'currentColor'\" [attr.clip-path]=\"'url(#pxb-donut-clip-'+stroke+')'\" [attr.d]=\"'M 12,12 H 24 A 12,12,0,'+(rangeValue(percent, 0, 100)>=50?1:0)+',1,'+getCoordinates(rangeValue(percent, 0, 100))['x']+','+getCoordinates(rangeValue(percent, 0, 100))['y']+'Z'\" />\n    </svg>\n  `,\n  styles: [],\n  inputs: ['percent', 'size', 'color', 'ring']\n})\nexport class PieComponent implements OnInit {\n  percent:number = 100;\n  size:number = 24;\n  color:string;\n  ring:number = 10;\n  stroke:number;\n  constructor() { }\n\n  ngOnInit() {\n    this.stroke = Math.max(1,Math.min(10, Math.round(this.ring)));\n  }\n  rangeValue(value, min, max){\n    return Math.max(min,Math.min(value,max))\n  }\n  getCoordinates(percent){\n    const radius = 12;\n    const degrees = percent*3.6;\n    return {\n      x: radius + (radius * Math.cos( (Math.PI/180) * (degrees))),\n      y: radius + (radius * Math.sin( (Math.PI/180) * (degrees)))\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';  \nimport { PieComponent } from './pie.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [PieComponent],\n  exports: [PieComponent]\n})\nexport class PieModule { }\n"],"names":[],"mappings":";;;;;;;AAAA;IAOE,iBAAiB;;;YALlB,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;ACJD;IAsBE;uBALiB,GAAG;oBACN,EAAE;oBAEF,EAAE;KAEC;;;;IAEjB,QAAQ;QACN,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KAC/D;;;;;;;IACD,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG;QACxB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC,CAAA;KACzC;;;;;IACD,cAAc,CAAC,OAAO;;QACpB,MAAM,MAAM,GAAG,EAAE,CAAC;;QAClB,MAAM,OAAO,GAAG,OAAO,GAAC,GAAG,CAAC;QAC5B,OAAO;YACL,CAAC,EAAE,MAAM,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAE,CAAC,IAAI,CAAC,EAAE,GAAC,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC;YAC3D,CAAC,EAAE,MAAM,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAE,CAAC,IAAI,CAAC,EAAE,GAAC,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC;SAC5D,CAAA;KACF;;;YAnCF,SAAS,SAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,QAAQ,EAAE;;;;;;;;GAQT;gBACD,MAAM,EAAE,EAAE;gBACV,MAAM,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;aAC7C;;;;;;;;;ACfD;;;YAIC,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;gBACD,YAAY,EAAE,CAAC,YAAY,CAAC;gBAC5B,OAAO,EAAE,CAAC,YAAY,CAAC;aACxB;;;;;;;;;;;;;;;"}
